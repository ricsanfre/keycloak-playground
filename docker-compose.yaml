services:

  # Securing docker.sock access
  docker-proxy:
    container_name: docker-proxy
    environment:
      CONTAINERS: 1
    image: tecnativa/docker-socket-proxy
    networks:
      - backend
    ports:
      - 2375
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  # Traefik front-end
  traefik:
    depends_on:
      - docker-proxy
    image: traefik
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      frontend:
        aliases:
          - ${KEYCLOAK_URL}
      backend:
    ports:
      - 80:80
      - 443:443
    environment:
      - IONOS_API_KEY=${IONOS_API_KEY}
    
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/acme.json:/acme.json
      - ./traefik/access.log:/data/access.log
  
  postgres:
    image: postgres:16.2
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.5
    container_name: keycloak
    command: start
    environment:
      KC_HOSTNAME: ${KEYCLOAK_URL}
      KC_HOSTNAME_PORT: 8080
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    # ports:
    #   - 8080:8080
    restart: always
    depends_on:
      - postgres
      - traefik
    networks:
      frontend:
      backend:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.entrypoints=http"
      - "traefik.http.routers.keycloak.rule=Host(`$KEYCLOAK_URL`)"
      - "traefik.http.middlewares.keycloak-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.keycloak.middlewares=keycloak-https-redirect"
      - "traefik.http.routers.keycloak-secure.entrypoints=https"
      - "traefik.http.routers.keycloak-secure.rule=Host(`$KEYCLOAK_URL`)"
      - "traefik.http.routers.keycloak-secure.tls=true"
      - "traefik.http.routers.keycloak-secure.tls.certresolver=ionos"
      - "traefik.http.routers.keycloak-secure.service=keycloak"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
  # backend:
  #   image: test-app:backend
  #   build: 
  #     context: ./ch2/backend
  #   container_name: test-app-backend
  #   environment:
  #     KC_URL: http://localhost:8080/auth
  #   ports:
  #     - 3000:3000
  #   restart: unless-stopped
  #   networks:
  #     - frontend
  # frontend:
  #   image: test-app:frontend
  #   build: 
  #     context: ./ch2/frontend
  #   environment:
  #     KC_URL: http://localhost:8080
  #     SERVICE_URL: http://localhost:3000
  #   container_name: test-app-frontend
  #   ports: 
  #     - 8000:8000
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  #   networks:
  #     - frontend
  oidc-playground:
    image: openid-playground
    build: 
      context: ./ch4
    environment:
      KC_URL: https://${KEYCLOAK_URL}
    container_name: oidc-playground
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oidc-playground.entrypoints=http"
      - "traefik.http.routers.oidc-playground.rule=Host(`$OIDC_PLAYGROUND_URL`)"
      - "traefik.http.middlewares.oidc-playground-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.oidc-playground.middlewares=oidc-playground-https-redirect"
      - "traefik.http.routers.oidc-playground-secure.entrypoints=https"
      - "traefik.http.routers.oidc-playground-secure.rule=Host(`$OIDC_PLAYGROUND_URL`)"
      - "traefik.http.routers.oidc-playground-secure.tls=true"
      - "traefik.http.routers.oidc-playground-secure.tls.certresolver=ionos"
      - "traefik.http.routers.oidc-playground-secure.service=oidc-playground"
      - "traefik.http.services.oidc-playground.loadbalancer.server.port=8000"

  oauth2-playground-backend:
    image: oauth2-playground-backend
    build: 
      context: ./ch5/backend
    environment:
      KC_URL: https://${KEYCLOAK_URL}
    container_name: oauth2-playground-backend
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth2-playground-backend.entrypoints=http"
      - "traefik.http.routers.oauth2-playground-backend.rule=Host(`$OAUTH_PLAYGROUND_BACKEND_URL`)"
      - "traefik.http.middlewares.oauth2-playground-backend-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.oauth2-playground-backend.middlewares=oauth2-playground-backend-https-redirect"
      - "traefik.http.routers.oauth2-playground-backend-secure.entrypoints=https"
      - "traefik.http.routers.oauth2-playground-backend-secure.rule=Host(`$OAUTH_PLAYGROUND_BACKEND_URL`)"
      - "traefik.http.routers.oauth2-playground-backend-secure.tls=true"
      - "traefik.http.routers.oauth2-playground-backend-secure.tls.certresolver=ionos"
      - "traefik.http.routers.oauth2-playground-backend-secure.service=oauth2-playground-backend"
      - "traefik.http.services.oauth2-playground-backend.loadbalancer.server.port=3000"
  oauth2-playground-frontend:
    image: oauth2-playground-frontend
    build: 
      context: ./ch5/frontend
    environment:
      KC_URL: https://${KEYCLOAK_URL}
      SERVICE_URL: https://${OAUTH_PLAYGROUND_BACKEND_URL}/secured
    container_name: oauth2-playground-frontend
    depends_on:
      - oauth2-playground-backend
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth2-playground-frontend.entrypoints=http"
      - "traefik.http.routers.oauth2-playground-frontend.rule=Host(`$OAUTH_PLAYGROUND_FRONTEND_URL`)"
      - "traefik.http.middlewares.oauth2-playground-frontend-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.oauth2-playground-frontend.middlewares=oauth2-playground-frontend-https-redirect"
      - "traefik.http.routers.oauth2-playground-frontend-secure.entrypoints=https"
      - "traefik.http.routers.oauth2-playground-frontend-secure.rule=Host(`$OAUTH_PLAYGROUND_FRONTEND_URL`)"
      - "traefik.http.routers.oauth2-playground-frontend-secure.tls=true"
      - "traefik.http.routers.oauth2-playground-frontend-secure.tls.certresolver=ionos"
      - "traefik.http.routers.oauth2-playground-frontend-secure.service=oauth2-playground-frontend"
      - "traefik.http.services.oauth2-playground-frontend.loadbalancer.server.port=8000"

volumes:
  postgres_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
